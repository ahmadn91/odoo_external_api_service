// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ResPartner is an object representing the database table.
type ResPartner struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CompanyID  null.Int    `boil:"company_id" json:"company_id,omitempty" toml:"company_id" yaml:"company_id,omitempty"`
	CreateDate null.Time   `boil:"create_date" json:"create_date,omitempty" toml:"create_date" yaml:"create_date,omitempty"`
	// Display Name
	DisplayName null.String `boil:"display_name" json:"display_name,omitempty" toml:"display_name" yaml:"display_name,omitempty"`
	// Date
	Date null.Time `boil:"date" json:"date,omitempty" toml:"date" yaml:"date,omitempty"`
	// Title
	Title null.Int `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	// Related Company
	ParentID null.Int `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	// Reference
	Ref null.String `boil:"ref" json:"ref,omitempty" toml:"ref" yaml:"ref,omitempty"`
	// Language
	Lang null.String `boil:"lang" json:"lang,omitempty" toml:"lang" yaml:"lang,omitempty"`
	// Timezone
	TZ null.String `boil:"tz" json:"tz,omitempty" toml:"tz" yaml:"tz,omitempty"`
	// Salesperson
	UserID null.Int `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	// Tax ID
	Vat null.String `boil:"vat" json:"vat,omitempty" toml:"vat" yaml:"vat,omitempty"`
	// Website Link
	Website null.String `boil:"website" json:"website,omitempty" toml:"website" yaml:"website,omitempty"`
	// Notes
	Comment null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	// Credit Limit
	CreditLimit null.Float64 `boil:"credit_limit" json:"credit_limit,omitempty" toml:"credit_limit" yaml:"credit_limit,omitempty"`
	// Active
	Active null.Bool `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	// Employee
	Employee null.Bool `boil:"employee" json:"employee,omitempty" toml:"employee" yaml:"employee,omitempty"`
	// Job Position
	Function null.String `boil:"function" json:"function,omitempty" toml:"function" yaml:"function,omitempty"`
	// Address Type
	Type null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	// Street
	Street null.String `boil:"street" json:"street,omitempty" toml:"street" yaml:"street,omitempty"`
	// Street2
	Street2 null.String `boil:"street2" json:"street2,omitempty" toml:"street2" yaml:"street2,omitempty"`
	// Zip
	Zip null.String `boil:"zip" json:"zip,omitempty" toml:"zip" yaml:"zip,omitempty"`
	// City
	City null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	// State
	StateID null.Int `boil:"state_id" json:"state_id,omitempty" toml:"state_id" yaml:"state_id,omitempty"`
	// Country
	CountryID null.Int `boil:"country_id" json:"country_id,omitempty" toml:"country_id" yaml:"country_id,omitempty"`
	// Geo Latitude
	PartnerLatitude types.NullDecimal `boil:"partner_latitude" json:"partner_latitude,omitempty" toml:"partner_latitude" yaml:"partner_latitude,omitempty"`
	// Geo Longitude
	PartnerLongitude types.NullDecimal `boil:"partner_longitude" json:"partner_longitude,omitempty" toml:"partner_longitude" yaml:"partner_longitude,omitempty"`
	// Email
	Email null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	// Phone
	Phone null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	// Mobile
	Mobile null.String `boil:"mobile" json:"mobile,omitempty" toml:"mobile" yaml:"mobile,omitempty"`
	// Is a Company
	IsCompany null.Bool `boil:"is_company" json:"is_company,omitempty" toml:"is_company" yaml:"is_company,omitempty"`
	// Industry
	IndustryID null.Int `boil:"industry_id" json:"industry_id,omitempty" toml:"industry_id" yaml:"industry_id,omitempty"`
	// Color Index
	Color null.Int `boil:"color" json:"color,omitempty" toml:"color" yaml:"color,omitempty"`
	// Share Partner
	PartnerShare null.Bool `boil:"partner_share" json:"partner_share,omitempty" toml:"partner_share" yaml:"partner_share,omitempty"`
	// Commercial Entity
	CommercialPartnerID null.Int `boil:"commercial_partner_id" json:"commercial_partner_id,omitempty" toml:"commercial_partner_id" yaml:"commercial_partner_id,omitempty"`
	// Company Name Entity
	CommercialCompanyName null.String `boil:"commercial_company_name" json:"commercial_company_name,omitempty" toml:"commercial_company_name" yaml:"commercial_company_name,omitempty"`
	// Company Name
	CompanyName null.String `boil:"company_name" json:"company_name,omitempty" toml:"company_name" yaml:"company_name,omitempty"`
	// Created by
	CreateUID null.Int `boil:"create_uid" json:"create_uid,omitempty" toml:"create_uid" yaml:"create_uid,omitempty"`
	// Last Updated by
	WriteUID null.Int `boil:"write_uid" json:"write_uid,omitempty" toml:"write_uid" yaml:"write_uid,omitempty"`
	// Last Updated on
	WriteDate null.Time `boil:"write_date" json:"write_date,omitempty" toml:"write_date" yaml:"write_date,omitempty"`
	// Geolocation Date
	DateLocalization null.Time `boil:"date_localization" json:"date_localization,omitempty" toml:"date_localization" yaml:"date_localization,omitempty"`
	// Main Attachment
	MessageMainAttachmentID null.Int `boil:"message_main_attachment_id" json:"message_main_attachment_id,omitempty" toml:"message_main_attachment_id" yaml:"message_main_attachment_id,omitempty"`
	// Normalized Email
	EmailNormalized null.String `boil:"email_normalized" json:"email_normalized,omitempty" toml:"email_normalized" yaml:"email_normalized,omitempty"`
	// Bounce
	MessageBounce null.Int `boil:"message_bounce" json:"message_bounce,omitempty" toml:"message_bounce" yaml:"message_bounce,omitempty"`
	// Contact Address Complete
	ContactAddressComplete null.String `boil:"contact_address_complete" json:"contact_address_complete,omitempty" toml:"contact_address_complete" yaml:"contact_address_complete,omitempty"`
	// Signup Token
	SignupToken null.String `boil:"signup_token" json:"signup_token,omitempty" toml:"signup_token" yaml:"signup_token,omitempty"`
	// Signup Token Type
	SignupType null.String `boil:"signup_type" json:"signup_type,omitempty" toml:"signup_type" yaml:"signup_type,omitempty"`
	// Signup Expiration
	SignupExpiration null.Time `boil:"signup_expiration" json:"signup_expiration,omitempty" toml:"signup_expiration" yaml:"signup_expiration,omitempty"`
	// Plan To Change Car
	PlanToChangeCar null.Bool `boil:"plan_to_change_car" json:"plan_to_change_car,omitempty" toml:"plan_to_change_car" yaml:"plan_to_change_car,omitempty"`
	// Plan To Change Bike
	PlanToChangeBike null.Bool `boil:"plan_to_change_bike" json:"plan_to_change_bike,omitempty" toml:"plan_to_change_bike" yaml:"plan_to_change_bike,omitempty"`
	// Sales Team
	TeamID null.Int `boil:"team_id" json:"team_id,omitempty" toml:"team_id" yaml:"team_id,omitempty"`
	// Company database ID
	PartnerGid null.Int `boil:"partner_gid" json:"partner_gid,omitempty" toml:"partner_gid" yaml:"partner_gid,omitempty"`
	// Additional info
	AdditionalInfo null.String `boil:"additional_info" json:"additional_info,omitempty" toml:"additional_info" yaml:"additional_info,omitempty"`
	// Sanitized Number
	PhoneSanitized null.String `boil:"phone_sanitized" json:"phone_sanitized,omitempty" toml:"phone_sanitized" yaml:"phone_sanitized,omitempty"`
	// Payable Limit
	DebitLimit types.NullDecimal `boil:"debit_limit" json:"debit_limit,omitempty" toml:"debit_limit" yaml:"debit_limit,omitempty"`
	// Latest Invoices & Payments Matching Date
	LastTimeEntriesChecked null.Time `boil:"last_time_entries_checked" json:"last_time_entries_checked,omitempty" toml:"last_time_entries_checked" yaml:"last_time_entries_checked,omitempty"`
	// Invoice
	InvoiceWarn null.String `boil:"invoice_warn" json:"invoice_warn,omitempty" toml:"invoice_warn" yaml:"invoice_warn,omitempty"`
	// Message for Invoice
	InvoiceWarnMSG null.String `boil:"invoice_warn_msg" json:"invoice_warn_msg,omitempty" toml:"invoice_warn_msg" yaml:"invoice_warn_msg,omitempty"`
	// Supplier Rank
	SupplierRank null.Int `boil:"supplier_rank" json:"supplier_rank,omitempty" toml:"supplier_rank" yaml:"supplier_rank,omitempty"`
	// Customer Rank
	CustomerRank null.Int `boil:"customer_rank" json:"customer_rank,omitempty" toml:"customer_rank" yaml:"customer_rank,omitempty"`
	// Stock Picking
	PickingWarn null.String `boil:"picking_warn" json:"picking_warn,omitempty" toml:"picking_warn" yaml:"picking_warn,omitempty"`
	// Message for Stock Picking
	PickingWarnMSG null.String `boil:"picking_warn_msg" json:"picking_warn_msg,omitempty" toml:"picking_warn_msg" yaml:"picking_warn_msg,omitempty"`
	// Purchase Order
	PurchaseWarn null.String `boil:"purchase_warn" json:"purchase_warn,omitempty" toml:"purchase_warn" yaml:"purchase_warn,omitempty"`
	// Message for Purchase Order
	PurchaseWarnMSG null.String `boil:"purchase_warn_msg" json:"purchase_warn_msg,omitempty" toml:"purchase_warn_msg" yaml:"purchase_warn_msg,omitempty"`
	// Sales Warnings
	SaleWarn null.String `boil:"sale_warn" json:"sale_warn,omitempty" toml:"sale_warn" yaml:"sale_warn,omitempty"`
	// Message for Sales Order
	SaleWarnMSG null.String `boil:"sale_warn_msg" json:"sale_warn_msg,omitempty" toml:"sale_warn_msg" yaml:"sale_warn_msg,omitempty"`
	// GUID
	GUID null.String `boil:"guid" json:"guid,omitempty" toml:"guid" yaml:"guid,omitempty"`
	// Zone
	ZoneID null.Int `boil:"zone_id" json:"zone_id,omitempty" toml:"zone_id" yaml:"zone_id,omitempty"`
	// Cluster
	ClusterID null.Int `boil:"cluster_id" json:"cluster_id,omitempty" toml:"cluster_id" yaml:"cluster_id,omitempty"`
	// District
	DistrictID null.Int `boil:"district_id" json:"district_id,omitempty" toml:"district_id" yaml:"district_id,omitempty"`
	// Map Widget Field
	MapWidgetField null.String `boil:"map_widget_field" json:"map_widget_field,omitempty" toml:"map_widget_field" yaml:"map_widget_field,omitempty"`
	// Location Assigned Zone
	LocationAssignedZoneFalse null.Bool `boil:"location_assigned_zone_false" json:"location_assigned_zone_false,omitempty" toml:"location_assigned_zone_false" yaml:"location_assigned_zone_false,omitempty"`
	// OCN Token
	OcnToken null.String `boil:"ocn_token" json:"ocn_token,omitempty" toml:"ocn_token" yaml:"ocn_token,omitempty"`
	// Online Partner Information
	OnlinePartnerInformation null.String `boil:"online_partner_information" json:"online_partner_information,omitempty" toml:"online_partner_information" yaml:"online_partner_information,omitempty"`

	R *resPartnerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L resPartnerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ResPartnerColumns = struct {
	ID                        string
	Name                      string
	CompanyID                 string
	CreateDate                string
	DisplayName               string
	Date                      string
	Title                     string
	ParentID                  string
	Ref                       string
	Lang                      string
	TZ                        string
	UserID                    string
	Vat                       string
	Website                   string
	Comment                   string
	CreditLimit               string
	Active                    string
	Employee                  string
	Function                  string
	Type                      string
	Street                    string
	Street2                   string
	Zip                       string
	City                      string
	StateID                   string
	CountryID                 string
	PartnerLatitude           string
	PartnerLongitude          string
	Email                     string
	Phone                     string
	Mobile                    string
	IsCompany                 string
	IndustryID                string
	Color                     string
	PartnerShare              string
	CommercialPartnerID       string
	CommercialCompanyName     string
	CompanyName               string
	CreateUID                 string
	WriteUID                  string
	WriteDate                 string
	DateLocalization          string
	MessageMainAttachmentID   string
	EmailNormalized           string
	MessageBounce             string
	ContactAddressComplete    string
	SignupToken               string
	SignupType                string
	SignupExpiration          string
	PlanToChangeCar           string
	PlanToChangeBike          string
	TeamID                    string
	PartnerGid                string
	AdditionalInfo            string
	PhoneSanitized            string
	DebitLimit                string
	LastTimeEntriesChecked    string
	InvoiceWarn               string
	InvoiceWarnMSG            string
	SupplierRank              string
	CustomerRank              string
	PickingWarn               string
	PickingWarnMSG            string
	PurchaseWarn              string
	PurchaseWarnMSG           string
	SaleWarn                  string
	SaleWarnMSG               string
	GUID                      string
	ZoneID                    string
	ClusterID                 string
	DistrictID                string
	MapWidgetField            string
	LocationAssignedZoneFalse string
	OcnToken                  string
	OnlinePartnerInformation  string
}{
	ID:                        "id",
	Name:                      "name",
	CompanyID:                 "company_id",
	CreateDate:                "create_date",
	DisplayName:               "display_name",
	Date:                      "date",
	Title:                     "title",
	ParentID:                  "parent_id",
	Ref:                       "ref",
	Lang:                      "lang",
	TZ:                        "tz",
	UserID:                    "user_id",
	Vat:                       "vat",
	Website:                   "website",
	Comment:                   "comment",
	CreditLimit:               "credit_limit",
	Active:                    "active",
	Employee:                  "employee",
	Function:                  "function",
	Type:                      "type",
	Street:                    "street",
	Street2:                   "street2",
	Zip:                       "zip",
	City:                      "city",
	StateID:                   "state_id",
	CountryID:                 "country_id",
	PartnerLatitude:           "partner_latitude",
	PartnerLongitude:          "partner_longitude",
	Email:                     "email",
	Phone:                     "phone",
	Mobile:                    "mobile",
	IsCompany:                 "is_company",
	IndustryID:                "industry_id",
	Color:                     "color",
	PartnerShare:              "partner_share",
	CommercialPartnerID:       "commercial_partner_id",
	CommercialCompanyName:     "commercial_company_name",
	CompanyName:               "company_name",
	CreateUID:                 "create_uid",
	WriteUID:                  "write_uid",
	WriteDate:                 "write_date",
	DateLocalization:          "date_localization",
	MessageMainAttachmentID:   "message_main_attachment_id",
	EmailNormalized:           "email_normalized",
	MessageBounce:             "message_bounce",
	ContactAddressComplete:    "contact_address_complete",
	SignupToken:               "signup_token",
	SignupType:                "signup_type",
	SignupExpiration:          "signup_expiration",
	PlanToChangeCar:           "plan_to_change_car",
	PlanToChangeBike:          "plan_to_change_bike",
	TeamID:                    "team_id",
	PartnerGid:                "partner_gid",
	AdditionalInfo:            "additional_info",
	PhoneSanitized:            "phone_sanitized",
	DebitLimit:                "debit_limit",
	LastTimeEntriesChecked:    "last_time_entries_checked",
	InvoiceWarn:               "invoice_warn",
	InvoiceWarnMSG:            "invoice_warn_msg",
	SupplierRank:              "supplier_rank",
	CustomerRank:              "customer_rank",
	PickingWarn:               "picking_warn",
	PickingWarnMSG:            "picking_warn_msg",
	PurchaseWarn:              "purchase_warn",
	PurchaseWarnMSG:           "purchase_warn_msg",
	SaleWarn:                  "sale_warn",
	SaleWarnMSG:               "sale_warn_msg",
	GUID:                      "guid",
	ZoneID:                    "zone_id",
	ClusterID:                 "cluster_id",
	DistrictID:                "district_id",
	MapWidgetField:            "map_widget_field",
	LocationAssignedZoneFalse: "location_assigned_zone_false",
	OcnToken:                  "ocn_token",
	OnlinePartnerInformation:  "online_partner_information",
}

var ResPartnerTableColumns = struct {
	ID                        string
	Name                      string
	CompanyID                 string
	CreateDate                string
	DisplayName               string
	Date                      string
	Title                     string
	ParentID                  string
	Ref                       string
	Lang                      string
	TZ                        string
	UserID                    string
	Vat                       string
	Website                   string
	Comment                   string
	CreditLimit               string
	Active                    string
	Employee                  string
	Function                  string
	Type                      string
	Street                    string
	Street2                   string
	Zip                       string
	City                      string
	StateID                   string
	CountryID                 string
	PartnerLatitude           string
	PartnerLongitude          string
	Email                     string
	Phone                     string
	Mobile                    string
	IsCompany                 string
	IndustryID                string
	Color                     string
	PartnerShare              string
	CommercialPartnerID       string
	CommercialCompanyName     string
	CompanyName               string
	CreateUID                 string
	WriteUID                  string
	WriteDate                 string
	DateLocalization          string
	MessageMainAttachmentID   string
	EmailNormalized           string
	MessageBounce             string
	ContactAddressComplete    string
	SignupToken               string
	SignupType                string
	SignupExpiration          string
	PlanToChangeCar           string
	PlanToChangeBike          string
	TeamID                    string
	PartnerGid                string
	AdditionalInfo            string
	PhoneSanitized            string
	DebitLimit                string
	LastTimeEntriesChecked    string
	InvoiceWarn               string
	InvoiceWarnMSG            string
	SupplierRank              string
	CustomerRank              string
	PickingWarn               string
	PickingWarnMSG            string
	PurchaseWarn              string
	PurchaseWarnMSG           string
	SaleWarn                  string
	SaleWarnMSG               string
	GUID                      string
	ZoneID                    string
	ClusterID                 string
	DistrictID                string
	MapWidgetField            string
	LocationAssignedZoneFalse string
	OcnToken                  string
	OnlinePartnerInformation  string
}{
	ID:                        "res_partner.id",
	Name:                      "res_partner.name",
	CompanyID:                 "res_partner.company_id",
	CreateDate:                "res_partner.create_date",
	DisplayName:               "res_partner.display_name",
	Date:                      "res_partner.date",
	Title:                     "res_partner.title",
	ParentID:                  "res_partner.parent_id",
	Ref:                       "res_partner.ref",
	Lang:                      "res_partner.lang",
	TZ:                        "res_partner.tz",
	UserID:                    "res_partner.user_id",
	Vat:                       "res_partner.vat",
	Website:                   "res_partner.website",
	Comment:                   "res_partner.comment",
	CreditLimit:               "res_partner.credit_limit",
	Active:                    "res_partner.active",
	Employee:                  "res_partner.employee",
	Function:                  "res_partner.function",
	Type:                      "res_partner.type",
	Street:                    "res_partner.street",
	Street2:                   "res_partner.street2",
	Zip:                       "res_partner.zip",
	City:                      "res_partner.city",
	StateID:                   "res_partner.state_id",
	CountryID:                 "res_partner.country_id",
	PartnerLatitude:           "res_partner.partner_latitude",
	PartnerLongitude:          "res_partner.partner_longitude",
	Email:                     "res_partner.email",
	Phone:                     "res_partner.phone",
	Mobile:                    "res_partner.mobile",
	IsCompany:                 "res_partner.is_company",
	IndustryID:                "res_partner.industry_id",
	Color:                     "res_partner.color",
	PartnerShare:              "res_partner.partner_share",
	CommercialPartnerID:       "res_partner.commercial_partner_id",
	CommercialCompanyName:     "res_partner.commercial_company_name",
	CompanyName:               "res_partner.company_name",
	CreateUID:                 "res_partner.create_uid",
	WriteUID:                  "res_partner.write_uid",
	WriteDate:                 "res_partner.write_date",
	DateLocalization:          "res_partner.date_localization",
	MessageMainAttachmentID:   "res_partner.message_main_attachment_id",
	EmailNormalized:           "res_partner.email_normalized",
	MessageBounce:             "res_partner.message_bounce",
	ContactAddressComplete:    "res_partner.contact_address_complete",
	SignupToken:               "res_partner.signup_token",
	SignupType:                "res_partner.signup_type",
	SignupExpiration:          "res_partner.signup_expiration",
	PlanToChangeCar:           "res_partner.plan_to_change_car",
	PlanToChangeBike:          "res_partner.plan_to_change_bike",
	TeamID:                    "res_partner.team_id",
	PartnerGid:                "res_partner.partner_gid",
	AdditionalInfo:            "res_partner.additional_info",
	PhoneSanitized:            "res_partner.phone_sanitized",
	DebitLimit:                "res_partner.debit_limit",
	LastTimeEntriesChecked:    "res_partner.last_time_entries_checked",
	InvoiceWarn:               "res_partner.invoice_warn",
	InvoiceWarnMSG:            "res_partner.invoice_warn_msg",
	SupplierRank:              "res_partner.supplier_rank",
	CustomerRank:              "res_partner.customer_rank",
	PickingWarn:               "res_partner.picking_warn",
	PickingWarnMSG:            "res_partner.picking_warn_msg",
	PurchaseWarn:              "res_partner.purchase_warn",
	PurchaseWarnMSG:           "res_partner.purchase_warn_msg",
	SaleWarn:                  "res_partner.sale_warn",
	SaleWarnMSG:               "res_partner.sale_warn_msg",
	GUID:                      "res_partner.guid",
	ZoneID:                    "res_partner.zone_id",
	ClusterID:                 "res_partner.cluster_id",
	DistrictID:                "res_partner.district_id",
	MapWidgetField:            "res_partner.map_widget_field",
	LocationAssignedZoneFalse: "res_partner.location_assigned_zone_false",
	OcnToken:                  "res_partner.ocn_token",
	OnlinePartnerInformation:  "res_partner.online_partner_information",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var ResPartnerWhere = struct {
	ID                        whereHelperint
	Name                      whereHelpernull_String
	CompanyID                 whereHelpernull_Int
	CreateDate                whereHelpernull_Time
	DisplayName               whereHelpernull_String
	Date                      whereHelpernull_Time
	Title                     whereHelpernull_Int
	ParentID                  whereHelpernull_Int
	Ref                       whereHelpernull_String
	Lang                      whereHelpernull_String
	TZ                        whereHelpernull_String
	UserID                    whereHelpernull_Int
	Vat                       whereHelpernull_String
	Website                   whereHelpernull_String
	Comment                   whereHelpernull_String
	CreditLimit               whereHelpernull_Float64
	Active                    whereHelpernull_Bool
	Employee                  whereHelpernull_Bool
	Function                  whereHelpernull_String
	Type                      whereHelpernull_String
	Street                    whereHelpernull_String
	Street2                   whereHelpernull_String
	Zip                       whereHelpernull_String
	City                      whereHelpernull_String
	StateID                   whereHelpernull_Int
	CountryID                 whereHelpernull_Int
	PartnerLatitude           whereHelpertypes_NullDecimal
	PartnerLongitude          whereHelpertypes_NullDecimal
	Email                     whereHelpernull_String
	Phone                     whereHelpernull_String
	Mobile                    whereHelpernull_String
	IsCompany                 whereHelpernull_Bool
	IndustryID                whereHelpernull_Int
	Color                     whereHelpernull_Int
	PartnerShare              whereHelpernull_Bool
	CommercialPartnerID       whereHelpernull_Int
	CommercialCompanyName     whereHelpernull_String
	CompanyName               whereHelpernull_String
	CreateUID                 whereHelpernull_Int
	WriteUID                  whereHelpernull_Int
	WriteDate                 whereHelpernull_Time
	DateLocalization          whereHelpernull_Time
	MessageMainAttachmentID   whereHelpernull_Int
	EmailNormalized           whereHelpernull_String
	MessageBounce             whereHelpernull_Int
	ContactAddressComplete    whereHelpernull_String
	SignupToken               whereHelpernull_String
	SignupType                whereHelpernull_String
	SignupExpiration          whereHelpernull_Time
	PlanToChangeCar           whereHelpernull_Bool
	PlanToChangeBike          whereHelpernull_Bool
	TeamID                    whereHelpernull_Int
	PartnerGid                whereHelpernull_Int
	AdditionalInfo            whereHelpernull_String
	PhoneSanitized            whereHelpernull_String
	DebitLimit                whereHelpertypes_NullDecimal
	LastTimeEntriesChecked    whereHelpernull_Time
	InvoiceWarn               whereHelpernull_String
	InvoiceWarnMSG            whereHelpernull_String
	SupplierRank              whereHelpernull_Int
	CustomerRank              whereHelpernull_Int
	PickingWarn               whereHelpernull_String
	PickingWarnMSG            whereHelpernull_String
	PurchaseWarn              whereHelpernull_String
	PurchaseWarnMSG           whereHelpernull_String
	SaleWarn                  whereHelpernull_String
	SaleWarnMSG               whereHelpernull_String
	GUID                      whereHelpernull_String
	ZoneID                    whereHelpernull_Int
	ClusterID                 whereHelpernull_Int
	DistrictID                whereHelpernull_Int
	MapWidgetField            whereHelpernull_String
	LocationAssignedZoneFalse whereHelpernull_Bool
	OcnToken                  whereHelpernull_String
	OnlinePartnerInformation  whereHelpernull_String
}{
	ID:                        whereHelperint{field: "\"res_partner\".\"id\""},
	Name:                      whereHelpernull_String{field: "\"res_partner\".\"name\""},
	CompanyID:                 whereHelpernull_Int{field: "\"res_partner\".\"company_id\""},
	CreateDate:                whereHelpernull_Time{field: "\"res_partner\".\"create_date\""},
	DisplayName:               whereHelpernull_String{field: "\"res_partner\".\"display_name\""},
	Date:                      whereHelpernull_Time{field: "\"res_partner\".\"date\""},
	Title:                     whereHelpernull_Int{field: "\"res_partner\".\"title\""},
	ParentID:                  whereHelpernull_Int{field: "\"res_partner\".\"parent_id\""},
	Ref:                       whereHelpernull_String{field: "\"res_partner\".\"ref\""},
	Lang:                      whereHelpernull_String{field: "\"res_partner\".\"lang\""},
	TZ:                        whereHelpernull_String{field: "\"res_partner\".\"tz\""},
	UserID:                    whereHelpernull_Int{field: "\"res_partner\".\"user_id\""},
	Vat:                       whereHelpernull_String{field: "\"res_partner\".\"vat\""},
	Website:                   whereHelpernull_String{field: "\"res_partner\".\"website\""},
	Comment:                   whereHelpernull_String{field: "\"res_partner\".\"comment\""},
	CreditLimit:               whereHelpernull_Float64{field: "\"res_partner\".\"credit_limit\""},
	Active:                    whereHelpernull_Bool{field: "\"res_partner\".\"active\""},
	Employee:                  whereHelpernull_Bool{field: "\"res_partner\".\"employee\""},
	Function:                  whereHelpernull_String{field: "\"res_partner\".\"function\""},
	Type:                      whereHelpernull_String{field: "\"res_partner\".\"type\""},
	Street:                    whereHelpernull_String{field: "\"res_partner\".\"street\""},
	Street2:                   whereHelpernull_String{field: "\"res_partner\".\"street2\""},
	Zip:                       whereHelpernull_String{field: "\"res_partner\".\"zip\""},
	City:                      whereHelpernull_String{field: "\"res_partner\".\"city\""},
	StateID:                   whereHelpernull_Int{field: "\"res_partner\".\"state_id\""},
	CountryID:                 whereHelpernull_Int{field: "\"res_partner\".\"country_id\""},
	PartnerLatitude:           whereHelpertypes_NullDecimal{field: "\"res_partner\".\"partner_latitude\""},
	PartnerLongitude:          whereHelpertypes_NullDecimal{field: "\"res_partner\".\"partner_longitude\""},
	Email:                     whereHelpernull_String{field: "\"res_partner\".\"email\""},
	Phone:                     whereHelpernull_String{field: "\"res_partner\".\"phone\""},
	Mobile:                    whereHelpernull_String{field: "\"res_partner\".\"mobile\""},
	IsCompany:                 whereHelpernull_Bool{field: "\"res_partner\".\"is_company\""},
	IndustryID:                whereHelpernull_Int{field: "\"res_partner\".\"industry_id\""},
	Color:                     whereHelpernull_Int{field: "\"res_partner\".\"color\""},
	PartnerShare:              whereHelpernull_Bool{field: "\"res_partner\".\"partner_share\""},
	CommercialPartnerID:       whereHelpernull_Int{field: "\"res_partner\".\"commercial_partner_id\""},
	CommercialCompanyName:     whereHelpernull_String{field: "\"res_partner\".\"commercial_company_name\""},
	CompanyName:               whereHelpernull_String{field: "\"res_partner\".\"company_name\""},
	CreateUID:                 whereHelpernull_Int{field: "\"res_partner\".\"create_uid\""},
	WriteUID:                  whereHelpernull_Int{field: "\"res_partner\".\"write_uid\""},
	WriteDate:                 whereHelpernull_Time{field: "\"res_partner\".\"write_date\""},
	DateLocalization:          whereHelpernull_Time{field: "\"res_partner\".\"date_localization\""},
	MessageMainAttachmentID:   whereHelpernull_Int{field: "\"res_partner\".\"message_main_attachment_id\""},
	EmailNormalized:           whereHelpernull_String{field: "\"res_partner\".\"email_normalized\""},
	MessageBounce:             whereHelpernull_Int{field: "\"res_partner\".\"message_bounce\""},
	ContactAddressComplete:    whereHelpernull_String{field: "\"res_partner\".\"contact_address_complete\""},
	SignupToken:               whereHelpernull_String{field: "\"res_partner\".\"signup_token\""},
	SignupType:                whereHelpernull_String{field: "\"res_partner\".\"signup_type\""},
	SignupExpiration:          whereHelpernull_Time{field: "\"res_partner\".\"signup_expiration\""},
	PlanToChangeCar:           whereHelpernull_Bool{field: "\"res_partner\".\"plan_to_change_car\""},
	PlanToChangeBike:          whereHelpernull_Bool{field: "\"res_partner\".\"plan_to_change_bike\""},
	TeamID:                    whereHelpernull_Int{field: "\"res_partner\".\"team_id\""},
	PartnerGid:                whereHelpernull_Int{field: "\"res_partner\".\"partner_gid\""},
	AdditionalInfo:            whereHelpernull_String{field: "\"res_partner\".\"additional_info\""},
	PhoneSanitized:            whereHelpernull_String{field: "\"res_partner\".\"phone_sanitized\""},
	DebitLimit:                whereHelpertypes_NullDecimal{field: "\"res_partner\".\"debit_limit\""},
	LastTimeEntriesChecked:    whereHelpernull_Time{field: "\"res_partner\".\"last_time_entries_checked\""},
	InvoiceWarn:               whereHelpernull_String{field: "\"res_partner\".\"invoice_warn\""},
	InvoiceWarnMSG:            whereHelpernull_String{field: "\"res_partner\".\"invoice_warn_msg\""},
	SupplierRank:              whereHelpernull_Int{field: "\"res_partner\".\"supplier_rank\""},
	CustomerRank:              whereHelpernull_Int{field: "\"res_partner\".\"customer_rank\""},
	PickingWarn:               whereHelpernull_String{field: "\"res_partner\".\"picking_warn\""},
	PickingWarnMSG:            whereHelpernull_String{field: "\"res_partner\".\"picking_warn_msg\""},
	PurchaseWarn:              whereHelpernull_String{field: "\"res_partner\".\"purchase_warn\""},
	PurchaseWarnMSG:           whereHelpernull_String{field: "\"res_partner\".\"purchase_warn_msg\""},
	SaleWarn:                  whereHelpernull_String{field: "\"res_partner\".\"sale_warn\""},
	SaleWarnMSG:               whereHelpernull_String{field: "\"res_partner\".\"sale_warn_msg\""},
	GUID:                      whereHelpernull_String{field: "\"res_partner\".\"guid\""},
	ZoneID:                    whereHelpernull_Int{field: "\"res_partner\".\"zone_id\""},
	ClusterID:                 whereHelpernull_Int{field: "\"res_partner\".\"cluster_id\""},
	DistrictID:                whereHelpernull_Int{field: "\"res_partner\".\"district_id\""},
	MapWidgetField:            whereHelpernull_String{field: "\"res_partner\".\"map_widget_field\""},
	LocationAssignedZoneFalse: whereHelpernull_Bool{field: "\"res_partner\".\"location_assigned_zone_false\""},
	OcnToken:                  whereHelpernull_String{field: "\"res_partner\".\"ocn_token\""},
	OnlinePartnerInformation:  whereHelpernull_String{field: "\"res_partner\".\"online_partner_information\""},
}

// ResPartnerRels is where relationship names are stored.
var ResPartnerRels = struct {
	CommercialPartner            string
	Parent                       string
	CommercialPartnerResPartners string
	ParentResPartners            string
}{
	CommercialPartner:            "CommercialPartner",
	Parent:                       "Parent",
	CommercialPartnerResPartners: "CommercialPartnerResPartners",
	ParentResPartners:            "ParentResPartners",
}

// resPartnerR is where relationships are stored.
type resPartnerR struct {
	CommercialPartner            *ResPartner     `boil:"CommercialPartner" json:"CommercialPartner" toml:"CommercialPartner" yaml:"CommercialPartner"`
	Parent                       *ResPartner     `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	CommercialPartnerResPartners ResPartnerSlice `boil:"CommercialPartnerResPartners" json:"CommercialPartnerResPartners" toml:"CommercialPartnerResPartners" yaml:"CommercialPartnerResPartners"`
	ParentResPartners            ResPartnerSlice `boil:"ParentResPartners" json:"ParentResPartners" toml:"ParentResPartners" yaml:"ParentResPartners"`
}

// NewStruct creates a new relationship struct
func (*resPartnerR) NewStruct() *resPartnerR {
	return &resPartnerR{}
}

func (r *resPartnerR) GetCommercialPartner() *ResPartner {
	if r == nil {
		return nil
	}
	return r.CommercialPartner
}

func (r *resPartnerR) GetParent() *ResPartner {
	if r == nil {
		return nil
	}
	return r.Parent
}

func (r *resPartnerR) GetCommercialPartnerResPartners() ResPartnerSlice {
	if r == nil {
		return nil
	}
	return r.CommercialPartnerResPartners
}

func (r *resPartnerR) GetParentResPartners() ResPartnerSlice {
	if r == nil {
		return nil
	}
	return r.ParentResPartners
}

// resPartnerL is where Load methods for each relationship are stored.
type resPartnerL struct{}

var (
	resPartnerAllColumns            = []string{"id", "name", "company_id", "create_date", "display_name", "date", "title", "parent_id", "ref", "lang", "tz", "user_id", "vat", "website", "comment", "credit_limit", "active", "employee", "function", "type", "street", "street2", "zip", "city", "state_id", "country_id", "partner_latitude", "partner_longitude", "email", "phone", "mobile", "is_company", "industry_id", "color", "partner_share", "commercial_partner_id", "commercial_company_name", "company_name", "create_uid", "write_uid", "write_date", "date_localization", "message_main_attachment_id", "email_normalized", "message_bounce", "contact_address_complete", "signup_token", "signup_type", "signup_expiration", "plan_to_change_car", "plan_to_change_bike", "team_id", "partner_gid", "additional_info", "phone_sanitized", "debit_limit", "last_time_entries_checked", "invoice_warn", "invoice_warn_msg", "supplier_rank", "customer_rank", "picking_warn", "picking_warn_msg", "purchase_warn", "purchase_warn_msg", "sale_warn", "sale_warn_msg", "guid", "zone_id", "cluster_id", "district_id", "map_widget_field", "location_assigned_zone_false", "ocn_token", "online_partner_information"}
	resPartnerColumnsWithoutDefault = []string{}
	resPartnerColumnsWithDefault    = []string{"id", "name", "company_id", "create_date", "display_name", "date", "title", "parent_id", "ref", "lang", "tz", "user_id", "vat", "website", "comment", "credit_limit", "active", "employee", "function", "type", "street", "street2", "zip", "city", "state_id", "country_id", "partner_latitude", "partner_longitude", "email", "phone", "mobile", "is_company", "industry_id", "color", "partner_share", "commercial_partner_id", "commercial_company_name", "company_name", "create_uid", "write_uid", "write_date", "date_localization", "message_main_attachment_id", "email_normalized", "message_bounce", "contact_address_complete", "signup_token", "signup_type", "signup_expiration", "plan_to_change_car", "plan_to_change_bike", "team_id", "partner_gid", "additional_info", "phone_sanitized", "debit_limit", "last_time_entries_checked", "invoice_warn", "invoice_warn_msg", "supplier_rank", "customer_rank", "picking_warn", "picking_warn_msg", "purchase_warn", "purchase_warn_msg", "sale_warn", "sale_warn_msg", "guid", "zone_id", "cluster_id", "district_id", "map_widget_field", "location_assigned_zone_false", "ocn_token", "online_partner_information"}
	resPartnerPrimaryKeyColumns     = []string{"id"}
	resPartnerGeneratedColumns      = []string{}
)

type (
	// ResPartnerSlice is an alias for a slice of pointers to ResPartner.
	// This should almost always be used instead of []ResPartner.
	ResPartnerSlice []*ResPartner
	// ResPartnerHook is the signature for custom ResPartner hook methods
	ResPartnerHook func(context.Context, boil.ContextExecutor, *ResPartner) error

	resPartnerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	resPartnerType                 = reflect.TypeOf(&ResPartner{})
	resPartnerMapping              = queries.MakeStructMapping(resPartnerType)
	resPartnerPrimaryKeyMapping, _ = queries.BindMapping(resPartnerType, resPartnerMapping, resPartnerPrimaryKeyColumns)
	resPartnerInsertCacheMut       sync.RWMutex
	resPartnerInsertCache          = make(map[string]insertCache)
	resPartnerUpdateCacheMut       sync.RWMutex
	resPartnerUpdateCache          = make(map[string]updateCache)
	resPartnerUpsertCacheMut       sync.RWMutex
	resPartnerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var resPartnerAfterSelectHooks []ResPartnerHook

var resPartnerBeforeInsertHooks []ResPartnerHook
var resPartnerAfterInsertHooks []ResPartnerHook

var resPartnerBeforeUpdateHooks []ResPartnerHook
var resPartnerAfterUpdateHooks []ResPartnerHook

var resPartnerBeforeDeleteHooks []ResPartnerHook
var resPartnerAfterDeleteHooks []ResPartnerHook

var resPartnerBeforeUpsertHooks []ResPartnerHook
var resPartnerAfterUpsertHooks []ResPartnerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ResPartner) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ResPartner) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ResPartner) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ResPartner) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ResPartner) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ResPartner) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ResPartner) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ResPartner) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ResPartner) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range resPartnerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddResPartnerHook registers your hook function for all future operations.
func AddResPartnerHook(hookPoint boil.HookPoint, resPartnerHook ResPartnerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		resPartnerAfterSelectHooks = append(resPartnerAfterSelectHooks, resPartnerHook)
	case boil.BeforeInsertHook:
		resPartnerBeforeInsertHooks = append(resPartnerBeforeInsertHooks, resPartnerHook)
	case boil.AfterInsertHook:
		resPartnerAfterInsertHooks = append(resPartnerAfterInsertHooks, resPartnerHook)
	case boil.BeforeUpdateHook:
		resPartnerBeforeUpdateHooks = append(resPartnerBeforeUpdateHooks, resPartnerHook)
	case boil.AfterUpdateHook:
		resPartnerAfterUpdateHooks = append(resPartnerAfterUpdateHooks, resPartnerHook)
	case boil.BeforeDeleteHook:
		resPartnerBeforeDeleteHooks = append(resPartnerBeforeDeleteHooks, resPartnerHook)
	case boil.AfterDeleteHook:
		resPartnerAfterDeleteHooks = append(resPartnerAfterDeleteHooks, resPartnerHook)
	case boil.BeforeUpsertHook:
		resPartnerBeforeUpsertHooks = append(resPartnerBeforeUpsertHooks, resPartnerHook)
	case boil.AfterUpsertHook:
		resPartnerAfterUpsertHooks = append(resPartnerAfterUpsertHooks, resPartnerHook)
	}
}

// OneG returns a single resPartner record from the query using the global executor.
func (q resPartnerQuery) OneG(ctx context.Context) (*ResPartner, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single resPartner record from the query using the global executor, and panics on error.
func (q resPartnerQuery) OneGP(ctx context.Context) *ResPartner {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single resPartner record from the query, and panics on error.
func (q resPartnerQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *ResPartner {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single resPartner record from the query.
func (q resPartnerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ResPartner, error) {
	o := &ResPartner{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for res_partner")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ResPartner records from the query using the global executor.
func (q resPartnerQuery) AllG(ctx context.Context) (ResPartnerSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all ResPartner records from the query using the global executor, and panics on error.
func (q resPartnerQuery) AllGP(ctx context.Context) ResPartnerSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all ResPartner records from the query, and panics on error.
func (q resPartnerQuery) AllP(ctx context.Context, exec boil.ContextExecutor) ResPartnerSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ResPartner records from the query.
func (q resPartnerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ResPartnerSlice, error) {
	var o []*ResPartner

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ResPartner slice")
	}

	if len(resPartnerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ResPartner records in the query using the global executor
func (q resPartnerQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all ResPartner records in the query using the global executor, and panics on error.
func (q resPartnerQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all ResPartner records in the query, and panics on error.
func (q resPartnerQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ResPartner records in the query.
func (q resPartnerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count res_partner rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q resPartnerQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q resPartnerQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q resPartnerQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q resPartnerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if res_partner exists")
	}

	return count > 0, nil
}

// CommercialPartner pointed to by the foreign key.
func (o *ResPartner) CommercialPartner(mods ...qm.QueryMod) resPartnerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CommercialPartnerID),
	}

	queryMods = append(queryMods, mods...)

	return ResPartners(queryMods...)
}

// Parent pointed to by the foreign key.
func (o *ResPartner) Parent(mods ...qm.QueryMod) resPartnerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	return ResPartners(queryMods...)
}

// CommercialPartnerResPartners retrieves all the res_partner's ResPartners with an executor via commercial_partner_id column.
func (o *ResPartner) CommercialPartnerResPartners(mods ...qm.QueryMod) resPartnerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"res_partner\".\"commercial_partner_id\"=?", o.ID),
	)

	return ResPartners(queryMods...)
}

// ParentResPartners retrieves all the res_partner's ResPartners with an executor via parent_id column.
func (o *ResPartner) ParentResPartners(mods ...qm.QueryMod) resPartnerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"res_partner\".\"parent_id\"=?", o.ID),
	)

	return ResPartners(queryMods...)
}

// LoadCommercialPartner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (resPartnerL) LoadCommercialPartner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResPartner interface{}, mods queries.Applicator) error {
	var slice []*ResPartner
	var object *ResPartner

	if singular {
		var ok bool
		object, ok = maybeResPartner.(*ResPartner)
		if !ok {
			object = new(ResPartner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeResPartner))
			}
		}
	} else {
		s, ok := maybeResPartner.(*[]*ResPartner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeResPartner))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &resPartnerR{}
		}
		if !queries.IsNil(object.CommercialPartnerID) {
			args = append(args, object.CommercialPartnerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resPartnerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CommercialPartnerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CommercialPartnerID) {
				args = append(args, obj.CommercialPartnerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`res_partner`),
		qm.WhereIn(`res_partner.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ResPartner")
	}

	var resultSlice []*ResPartner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ResPartner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for res_partner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for res_partner")
	}

	if len(resPartnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CommercialPartner = foreign
		if foreign.R == nil {
			foreign.R = &resPartnerR{}
		}
		foreign.R.CommercialPartnerResPartners = append(foreign.R.CommercialPartnerResPartners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CommercialPartnerID, foreign.ID) {
				local.R.CommercialPartner = foreign
				if foreign.R == nil {
					foreign.R = &resPartnerR{}
				}
				foreign.R.CommercialPartnerResPartners = append(foreign.R.CommercialPartnerResPartners, local)
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (resPartnerL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResPartner interface{}, mods queries.Applicator) error {
	var slice []*ResPartner
	var object *ResPartner

	if singular {
		var ok bool
		object, ok = maybeResPartner.(*ResPartner)
		if !ok {
			object = new(ResPartner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeResPartner))
			}
		}
	} else {
		s, ok := maybeResPartner.(*[]*ResPartner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeResPartner))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &resPartnerR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resPartnerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`res_partner`),
		qm.WhereIn(`res_partner.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ResPartner")
	}

	var resultSlice []*ResPartner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ResPartner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for res_partner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for res_partner")
	}

	if len(resPartnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &resPartnerR{}
		}
		foreign.R.ParentResPartners = append(foreign.R.ParentResPartners, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &resPartnerR{}
				}
				foreign.R.ParentResPartners = append(foreign.R.ParentResPartners, local)
				break
			}
		}
	}

	return nil
}

// LoadCommercialPartnerResPartners allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (resPartnerL) LoadCommercialPartnerResPartners(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResPartner interface{}, mods queries.Applicator) error {
	var slice []*ResPartner
	var object *ResPartner

	if singular {
		var ok bool
		object, ok = maybeResPartner.(*ResPartner)
		if !ok {
			object = new(ResPartner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeResPartner))
			}
		}
	} else {
		s, ok := maybeResPartner.(*[]*ResPartner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeResPartner))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &resPartnerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resPartnerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`res_partner`),
		qm.WhereIn(`res_partner.commercial_partner_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load res_partner")
	}

	var resultSlice []*ResPartner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice res_partner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on res_partner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for res_partner")
	}

	if len(resPartnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommercialPartnerResPartners = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &resPartnerR{}
			}
			foreign.R.CommercialPartner = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CommercialPartnerID) {
				local.R.CommercialPartnerResPartners = append(local.R.CommercialPartnerResPartners, foreign)
				if foreign.R == nil {
					foreign.R = &resPartnerR{}
				}
				foreign.R.CommercialPartner = local
				break
			}
		}
	}

	return nil
}

// LoadParentResPartners allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (resPartnerL) LoadParentResPartners(ctx context.Context, e boil.ContextExecutor, singular bool, maybeResPartner interface{}, mods queries.Applicator) error {
	var slice []*ResPartner
	var object *ResPartner

	if singular {
		var ok bool
		object, ok = maybeResPartner.(*ResPartner)
		if !ok {
			object = new(ResPartner)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeResPartner))
			}
		}
	} else {
		s, ok := maybeResPartner.(*[]*ResPartner)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeResPartner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeResPartner))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &resPartnerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &resPartnerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`res_partner`),
		qm.WhereIn(`res_partner.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load res_partner")
	}

	var resultSlice []*ResPartner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice res_partner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on res_partner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for res_partner")
	}

	if len(resPartnerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentResPartners = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &resPartnerR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentResPartners = append(local.R.ParentResPartners, foreign)
				if foreign.R == nil {
					foreign.R = &resPartnerR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// SetCommercialPartnerG of the resPartner to the related item.
// Sets o.R.CommercialPartner to related.
// Adds o to related.R.CommercialPartnerResPartners.
// Uses the global database handle.
func (o *ResPartner) SetCommercialPartnerG(ctx context.Context, insert bool, related *ResPartner) error {
	return o.SetCommercialPartner(ctx, boil.GetContextDB(), insert, related)
}

// SetCommercialPartnerP of the resPartner to the related item.
// Sets o.R.CommercialPartner to related.
// Adds o to related.R.CommercialPartnerResPartners.
// Panics on error.
func (o *ResPartner) SetCommercialPartnerP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ResPartner) {
	if err := o.SetCommercialPartner(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommercialPartnerGP of the resPartner to the related item.
// Sets o.R.CommercialPartner to related.
// Adds o to related.R.CommercialPartnerResPartners.
// Uses the global database handle and panics on error.
func (o *ResPartner) SetCommercialPartnerGP(ctx context.Context, insert bool, related *ResPartner) {
	if err := o.SetCommercialPartner(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommercialPartner of the resPartner to the related item.
// Sets o.R.CommercialPartner to related.
// Adds o to related.R.CommercialPartnerResPartners.
func (o *ResPartner) SetCommercialPartner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ResPartner) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"res_partner\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"commercial_partner_id"}),
		strmangle.WhereClause("\"", "\"", 2, resPartnerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CommercialPartnerID, related.ID)
	if o.R == nil {
		o.R = &resPartnerR{
			CommercialPartner: related,
		}
	} else {
		o.R.CommercialPartner = related
	}

	if related.R == nil {
		related.R = &resPartnerR{
			CommercialPartnerResPartners: ResPartnerSlice{o},
		}
	} else {
		related.R.CommercialPartnerResPartners = append(related.R.CommercialPartnerResPartners, o)
	}

	return nil
}

// RemoveCommercialPartnerG relationship.
// Sets o.R.CommercialPartner to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *ResPartner) RemoveCommercialPartnerG(ctx context.Context, related *ResPartner) error {
	return o.RemoveCommercialPartner(ctx, boil.GetContextDB(), related)
}

// RemoveCommercialPartnerP relationship.
// Sets o.R.CommercialPartner to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *ResPartner) RemoveCommercialPartnerP(ctx context.Context, exec boil.ContextExecutor, related *ResPartner) {
	if err := o.RemoveCommercialPartner(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCommercialPartnerGP relationship.
// Sets o.R.CommercialPartner to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle and panics on error.
func (o *ResPartner) RemoveCommercialPartnerGP(ctx context.Context, related *ResPartner) {
	if err := o.RemoveCommercialPartner(ctx, boil.GetContextDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCommercialPartner relationship.
// Sets o.R.CommercialPartner to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ResPartner) RemoveCommercialPartner(ctx context.Context, exec boil.ContextExecutor, related *ResPartner) error {
	var err error

	queries.SetScanner(&o.CommercialPartnerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("commercial_partner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CommercialPartner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CommercialPartnerResPartners {
		if queries.Equal(o.CommercialPartnerID, ri.CommercialPartnerID) {
			continue
		}

		ln := len(related.R.CommercialPartnerResPartners)
		if ln > 1 && i < ln-1 {
			related.R.CommercialPartnerResPartners[i] = related.R.CommercialPartnerResPartners[ln-1]
		}
		related.R.CommercialPartnerResPartners = related.R.CommercialPartnerResPartners[:ln-1]
		break
	}
	return nil
}

// SetParentG of the resPartner to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentResPartners.
// Uses the global database handle.
func (o *ResPartner) SetParentG(ctx context.Context, insert bool, related *ResPartner) error {
	return o.SetParent(ctx, boil.GetContextDB(), insert, related)
}

// SetParentP of the resPartner to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentResPartners.
// Panics on error.
func (o *ResPartner) SetParentP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ResPartner) {
	if err := o.SetParent(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentGP of the resPartner to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentResPartners.
// Uses the global database handle and panics on error.
func (o *ResPartner) SetParentGP(ctx context.Context, insert bool, related *ResPartner) {
	if err := o.SetParent(ctx, boil.GetContextDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParent of the resPartner to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentResPartners.
func (o *ResPartner) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ResPartner) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"res_partner\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, resPartnerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &resPartnerR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &resPartnerR{
			ParentResPartners: ResPartnerSlice{o},
		}
	} else {
		related.R.ParentResPartners = append(related.R.ParentResPartners, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *ResPartner) RemoveParentG(ctx context.Context, related *ResPartner) error {
	return o.RemoveParent(ctx, boil.GetContextDB(), related)
}

// RemoveParentP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *ResPartner) RemoveParentP(ctx context.Context, exec boil.ContextExecutor, related *ResPartner) {
	if err := o.RemoveParent(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentGP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle and panics on error.
func (o *ResPartner) RemoveParentGP(ctx context.Context, related *ResPartner) {
	if err := o.RemoveParent(ctx, boil.GetContextDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ResPartner) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *ResPartner) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentResPartners {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentResPartners)
		if ln > 1 && i < ln-1 {
			related.R.ParentResPartners[i] = related.R.ParentResPartners[ln-1]
		}
		related.R.ParentResPartners = related.R.ParentResPartners[:ln-1]
		break
	}
	return nil
}

// AddCommercialPartnerResPartnersG adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.CommercialPartnerResPartners.
// Sets related.R.CommercialPartner appropriately.
// Uses the global database handle.
func (o *ResPartner) AddCommercialPartnerResPartnersG(ctx context.Context, insert bool, related ...*ResPartner) error {
	return o.AddCommercialPartnerResPartners(ctx, boil.GetContextDB(), insert, related...)
}

// AddCommercialPartnerResPartnersP adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.CommercialPartnerResPartners.
// Sets related.R.CommercialPartner appropriately.
// Panics on error.
func (o *ResPartner) AddCommercialPartnerResPartnersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) {
	if err := o.AddCommercialPartnerResPartners(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCommercialPartnerResPartnersGP adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.CommercialPartnerResPartners.
// Sets related.R.CommercialPartner appropriately.
// Uses the global database handle and panics on error.
func (o *ResPartner) AddCommercialPartnerResPartnersGP(ctx context.Context, insert bool, related ...*ResPartner) {
	if err := o.AddCommercialPartnerResPartners(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCommercialPartnerResPartners adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.CommercialPartnerResPartners.
// Sets related.R.CommercialPartner appropriately.
func (o *ResPartner) AddCommercialPartnerResPartners(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CommercialPartnerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"res_partner\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"commercial_partner_id"}),
				strmangle.WhereClause("\"", "\"", 2, resPartnerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CommercialPartnerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &resPartnerR{
			CommercialPartnerResPartners: related,
		}
	} else {
		o.R.CommercialPartnerResPartners = append(o.R.CommercialPartnerResPartners, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &resPartnerR{
				CommercialPartner: o,
			}
		} else {
			rel.R.CommercialPartner = o
		}
	}
	return nil
}

// SetCommercialPartnerResPartnersG removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Replaces o.R.CommercialPartnerResPartners with related.
// Sets related.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Uses the global database handle.
func (o *ResPartner) SetCommercialPartnerResPartnersG(ctx context.Context, insert bool, related ...*ResPartner) error {
	return o.SetCommercialPartnerResPartners(ctx, boil.GetContextDB(), insert, related...)
}

// SetCommercialPartnerResPartnersP removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Replaces o.R.CommercialPartnerResPartners with related.
// Sets related.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Panics on error.
func (o *ResPartner) SetCommercialPartnerResPartnersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) {
	if err := o.SetCommercialPartnerResPartners(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommercialPartnerResPartnersGP removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Replaces o.R.CommercialPartnerResPartners with related.
// Sets related.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Uses the global database handle and panics on error.
func (o *ResPartner) SetCommercialPartnerResPartnersGP(ctx context.Context, insert bool, related ...*ResPartner) {
	if err := o.SetCommercialPartnerResPartners(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommercialPartnerResPartners removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CommercialPartner's CommercialPartnerResPartners accordingly.
// Replaces o.R.CommercialPartnerResPartners with related.
// Sets related.R.CommercialPartner's CommercialPartnerResPartners accordingly.
func (o *ResPartner) SetCommercialPartnerResPartners(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) error {
	query := "update \"res_partner\" set \"commercial_partner_id\" = null where \"commercial_partner_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CommercialPartnerResPartners {
			queries.SetScanner(&rel.CommercialPartnerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CommercialPartner = nil
		}
		o.R.CommercialPartnerResPartners = nil
	}

	return o.AddCommercialPartnerResPartners(ctx, exec, insert, related...)
}

// RemoveCommercialPartnerResPartnersG relationships from objects passed in.
// Removes related items from R.CommercialPartnerResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.CommercialPartner.
// Uses the global database handle.
func (o *ResPartner) RemoveCommercialPartnerResPartnersG(ctx context.Context, related ...*ResPartner) error {
	return o.RemoveCommercialPartnerResPartners(ctx, boil.GetContextDB(), related...)
}

// RemoveCommercialPartnerResPartnersP relationships from objects passed in.
// Removes related items from R.CommercialPartnerResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.CommercialPartner.
// Panics on error.
func (o *ResPartner) RemoveCommercialPartnerResPartnersP(ctx context.Context, exec boil.ContextExecutor, related ...*ResPartner) {
	if err := o.RemoveCommercialPartnerResPartners(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCommercialPartnerResPartnersGP relationships from objects passed in.
// Removes related items from R.CommercialPartnerResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.CommercialPartner.
// Uses the global database handle and panics on error.
func (o *ResPartner) RemoveCommercialPartnerResPartnersGP(ctx context.Context, related ...*ResPartner) {
	if err := o.RemoveCommercialPartnerResPartners(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCommercialPartnerResPartners relationships from objects passed in.
// Removes related items from R.CommercialPartnerResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.CommercialPartner.
func (o *ResPartner) RemoveCommercialPartnerResPartners(ctx context.Context, exec boil.ContextExecutor, related ...*ResPartner) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CommercialPartnerID, nil)
		if rel.R != nil {
			rel.R.CommercialPartner = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("commercial_partner_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CommercialPartnerResPartners {
			if rel != ri {
				continue
			}

			ln := len(o.R.CommercialPartnerResPartners)
			if ln > 1 && i < ln-1 {
				o.R.CommercialPartnerResPartners[i] = o.R.CommercialPartnerResPartners[ln-1]
			}
			o.R.CommercialPartnerResPartners = o.R.CommercialPartnerResPartners[:ln-1]
			break
		}
	}

	return nil
}

// AddParentResPartnersG adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.ParentResPartners.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *ResPartner) AddParentResPartnersG(ctx context.Context, insert bool, related ...*ResPartner) error {
	return o.AddParentResPartners(ctx, boil.GetContextDB(), insert, related...)
}

// AddParentResPartnersP adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.ParentResPartners.
// Sets related.R.Parent appropriately.
// Panics on error.
func (o *ResPartner) AddParentResPartnersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) {
	if err := o.AddParentResPartners(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentResPartnersGP adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.ParentResPartners.
// Sets related.R.Parent appropriately.
// Uses the global database handle and panics on error.
func (o *ResPartner) AddParentResPartnersGP(ctx context.Context, insert bool, related ...*ResPartner) {
	if err := o.AddParentResPartners(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentResPartners adds the given related objects to the existing relationships
// of the res_partner, optionally inserting them as new records.
// Appends related to o.R.ParentResPartners.
// Sets related.R.Parent appropriately.
func (o *ResPartner) AddParentResPartners(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"res_partner\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, resPartnerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &resPartnerR{
			ParentResPartners: related,
		}
	} else {
		o.R.ParentResPartners = append(o.R.ParentResPartners, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &resPartnerR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentResPartnersG removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentResPartners accordingly.
// Replaces o.R.ParentResPartners with related.
// Sets related.R.Parent's ParentResPartners accordingly.
// Uses the global database handle.
func (o *ResPartner) SetParentResPartnersG(ctx context.Context, insert bool, related ...*ResPartner) error {
	return o.SetParentResPartners(ctx, boil.GetContextDB(), insert, related...)
}

// SetParentResPartnersP removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentResPartners accordingly.
// Replaces o.R.ParentResPartners with related.
// Sets related.R.Parent's ParentResPartners accordingly.
// Panics on error.
func (o *ResPartner) SetParentResPartnersP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) {
	if err := o.SetParentResPartners(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentResPartnersGP removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentResPartners accordingly.
// Replaces o.R.ParentResPartners with related.
// Sets related.R.Parent's ParentResPartners accordingly.
// Uses the global database handle and panics on error.
func (o *ResPartner) SetParentResPartnersGP(ctx context.Context, insert bool, related ...*ResPartner) {
	if err := o.SetParentResPartners(ctx, boil.GetContextDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentResPartners removes all previously related items of the
// res_partner replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentResPartners accordingly.
// Replaces o.R.ParentResPartners with related.
// Sets related.R.Parent's ParentResPartners accordingly.
func (o *ResPartner) SetParentResPartners(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ResPartner) error {
	query := "update \"res_partner\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentResPartners {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}
		o.R.ParentResPartners = nil
	}

	return o.AddParentResPartners(ctx, exec, insert, related...)
}

// RemoveParentResPartnersG relationships from objects passed in.
// Removes related items from R.ParentResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *ResPartner) RemoveParentResPartnersG(ctx context.Context, related ...*ResPartner) error {
	return o.RemoveParentResPartners(ctx, boil.GetContextDB(), related...)
}

// RemoveParentResPartnersP relationships from objects passed in.
// Removes related items from R.ParentResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Panics on error.
func (o *ResPartner) RemoveParentResPartnersP(ctx context.Context, exec boil.ContextExecutor, related ...*ResPartner) {
	if err := o.RemoveParentResPartners(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentResPartnersGP relationships from objects passed in.
// Removes related items from R.ParentResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle and panics on error.
func (o *ResPartner) RemoveParentResPartnersGP(ctx context.Context, related ...*ResPartner) {
	if err := o.RemoveParentResPartners(ctx, boil.GetContextDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentResPartners relationships from objects passed in.
// Removes related items from R.ParentResPartners (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *ResPartner) RemoveParentResPartners(ctx context.Context, exec boil.ContextExecutor, related ...*ResPartner) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentResPartners {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentResPartners)
			if ln > 1 && i < ln-1 {
				o.R.ParentResPartners[i] = o.R.ParentResPartners[ln-1]
			}
			o.R.ParentResPartners = o.R.ParentResPartners[:ln-1]
			break
		}
	}

	return nil
}

// ResPartners retrieves all the records using an executor.
func ResPartners(mods ...qm.QueryMod) resPartnerQuery {
	mods = append(mods, qm.From("\"res_partner\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"res_partner\".*"})
	}

	return resPartnerQuery{q}
}

// FindResPartnerG retrieves a single record by ID.
func FindResPartnerG(ctx context.Context, iD int, selectCols ...string) (*ResPartner, error) {
	return FindResPartner(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindResPartnerP retrieves a single record by ID with an executor, and panics on error.
func FindResPartnerP(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) *ResPartner {
	retobj, err := FindResPartner(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindResPartnerGP retrieves a single record by ID, and panics on error.
func FindResPartnerGP(ctx context.Context, iD int, selectCols ...string) *ResPartner {
	retobj, err := FindResPartner(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindResPartner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindResPartner(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ResPartner, error) {
	resPartnerObj := &ResPartner{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"res_partner\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, resPartnerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from res_partner")
	}

	if err = resPartnerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return resPartnerObj, err
	}

	return resPartnerObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ResPartner) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ResPartner) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ResPartner) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ResPartner) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no res_partner provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resPartnerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	resPartnerInsertCacheMut.RLock()
	cache, cached := resPartnerInsertCache[key]
	resPartnerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			resPartnerAllColumns,
			resPartnerColumnsWithDefault,
			resPartnerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(resPartnerType, resPartnerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(resPartnerType, resPartnerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"res_partner\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"res_partner\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into res_partner")
	}

	if !cached {
		resPartnerInsertCacheMut.Lock()
		resPartnerInsertCache[key] = cache
		resPartnerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ResPartner record using the global executor.
// See Update for more documentation.
func (o *ResPartner) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the ResPartner, and panics on error.
// See Update for more documentation.
func (o *ResPartner) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single ResPartner record using the global executor. Panics on error.
// See Update for more documentation.
func (o *ResPartner) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the ResPartner.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ResPartner) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	resPartnerUpdateCacheMut.RLock()
	cache, cached := resPartnerUpdateCache[key]
	resPartnerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			resPartnerAllColumns,
			resPartnerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update res_partner, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"res_partner\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, resPartnerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(resPartnerType, resPartnerMapping, append(wl, resPartnerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update res_partner row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for res_partner")
	}

	if !cached {
		resPartnerUpdateCacheMut.Lock()
		resPartnerUpdateCache[key] = cache
		resPartnerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q resPartnerQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q resPartnerQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (q resPartnerQuery) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q resPartnerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for res_partner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for res_partner")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ResPartnerSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ResPartnerSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ResPartnerSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ResPartnerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resPartnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"res_partner\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, resPartnerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in resPartner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all resPartner")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ResPartner) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ResPartner) UpsertGP(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ResPartner) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ResPartner) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no res_partner provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(resPartnerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	resPartnerUpsertCacheMut.RLock()
	cache, cached := resPartnerUpsertCache[key]
	resPartnerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			resPartnerAllColumns,
			resPartnerColumnsWithDefault,
			resPartnerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			resPartnerAllColumns,
			resPartnerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert res_partner, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(resPartnerPrimaryKeyColumns))
			copy(conflict, resPartnerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"res_partner\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(resPartnerType, resPartnerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(resPartnerType, resPartnerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert res_partner")
	}

	if !cached {
		resPartnerUpsertCacheMut.Lock()
		resPartnerUpsertCache[key] = cache
		resPartnerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ResPartner record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ResPartner) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single ResPartner record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ResPartner) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single ResPartner record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ResPartner) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single ResPartner record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ResPartner) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ResPartner provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), resPartnerPrimaryKeyMapping)
	sql := "DELETE FROM \"res_partner\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from res_partner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for res_partner")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q resPartnerQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows, and panics on error.
func (q resPartnerQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows, and panics on error.
func (q resPartnerQuery) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := q.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q resPartnerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no resPartnerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from res_partner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for res_partner")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ResPartnerSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ResPartnerSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ResPartnerSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ResPartnerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(resPartnerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resPartnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"res_partner\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, resPartnerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from resPartner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for res_partner")
	}

	if len(resPartnerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ResPartner) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ResPartner provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ResPartner) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ResPartner) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ResPartner) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindResPartner(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResPartnerSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ResPartnerSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ResPartnerSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ResPartnerSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ResPartnerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ResPartnerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), resPartnerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"res_partner\".* FROM \"res_partner\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, resPartnerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ResPartnerSlice")
	}

	*o = slice

	return nil
}

// ResPartnerExistsG checks if the ResPartner row exists.
func ResPartnerExistsG(ctx context.Context, iD int) (bool, error) {
	return ResPartnerExists(ctx, boil.GetContextDB(), iD)
}

// ResPartnerExistsP checks if the ResPartner row exists. Panics on error.
func ResPartnerExistsP(ctx context.Context, exec boil.ContextExecutor, iD int) bool {
	e, err := ResPartnerExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ResPartnerExistsGP checks if the ResPartner row exists. Panics on error.
func ResPartnerExistsGP(ctx context.Context, iD int) bool {
	e, err := ResPartnerExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ResPartnerExists checks if the ResPartner row exists.
func ResPartnerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"res_partner\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if res_partner exists")
	}

	return exists, nil
}
