// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testResPartners(t *testing.T) {
	t.Parallel()

	query := ResPartners()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testResPartnersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResPartnersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ResPartners().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResPartnersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ResPartnerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testResPartnersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ResPartnerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ResPartner exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ResPartnerExists to return true, but got false.")
	}
}

func testResPartnersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	resPartnerFound, err := FindResPartner(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if resPartnerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testResPartnersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ResPartners().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testResPartnersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ResPartners().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testResPartnersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	resPartnerOne := &ResPartner{}
	resPartnerTwo := &ResPartner{}
	if err = randomize.Struct(seed, resPartnerOne, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}
	if err = randomize.Struct(seed, resPartnerTwo, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = resPartnerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = resPartnerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ResPartners().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testResPartnersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	resPartnerOne := &ResPartner{}
	resPartnerTwo := &ResPartner{}
	if err = randomize.Struct(seed, resPartnerOne, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}
	if err = randomize.Struct(seed, resPartnerTwo, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = resPartnerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = resPartnerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func resPartnerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func resPartnerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ResPartner) error {
	*o = ResPartner{}
	return nil
}

func testResPartnersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ResPartner{}
	o := &ResPartner{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, resPartnerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ResPartner object: %s", err)
	}

	AddResPartnerHook(boil.BeforeInsertHook, resPartnerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	resPartnerBeforeInsertHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.AfterInsertHook, resPartnerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	resPartnerAfterInsertHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.AfterSelectHook, resPartnerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	resPartnerAfterSelectHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.BeforeUpdateHook, resPartnerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	resPartnerBeforeUpdateHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.AfterUpdateHook, resPartnerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	resPartnerAfterUpdateHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.BeforeDeleteHook, resPartnerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	resPartnerBeforeDeleteHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.AfterDeleteHook, resPartnerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	resPartnerAfterDeleteHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.BeforeUpsertHook, resPartnerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	resPartnerBeforeUpsertHooks = []ResPartnerHook{}

	AddResPartnerHook(boil.AfterUpsertHook, resPartnerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	resPartnerAfterUpsertHooks = []ResPartnerHook{}
}

func testResPartnersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResPartnersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(resPartnerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testResPartnerToManyCommercialPartnerResPartners(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CommercialPartnerID, a.ID)
	queries.Assign(&c.CommercialPartnerID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CommercialPartnerResPartners().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CommercialPartnerID, b.CommercialPartnerID) {
			bFound = true
		}
		if queries.Equal(v.CommercialPartnerID, c.CommercialPartnerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ResPartnerSlice{&a}
	if err = a.L.LoadCommercialPartnerResPartners(ctx, tx, false, (*[]*ResPartner)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CommercialPartnerResPartners); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CommercialPartnerResPartners = nil
	if err = a.L.LoadCommercialPartnerResPartners(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CommercialPartnerResPartners); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testResPartnerToManyParentResPartners(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentID, a.ID)
	queries.Assign(&c.ParentID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentResPartners().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ParentID, b.ParentID) {
			bFound = true
		}
		if queries.Equal(v.ParentID, c.ParentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ResPartnerSlice{&a}
	if err = a.L.LoadParentResPartners(ctx, tx, false, (*[]*ResPartner)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentResPartners); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentResPartners = nil
	if err = a.L.LoadParentResPartners(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentResPartners); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testResPartnerToManyAddOpCommercialPartnerResPartners(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c, d, e ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResPartner{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ResPartner{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCommercialPartnerResPartners(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CommercialPartnerID) {
			t.Error("foreign key was wrong value", a.ID, first.CommercialPartnerID)
		}
		if !queries.Equal(a.ID, second.CommercialPartnerID) {
			t.Error("foreign key was wrong value", a.ID, second.CommercialPartnerID)
		}

		if first.R.CommercialPartner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CommercialPartner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CommercialPartnerResPartners[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CommercialPartnerResPartners[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CommercialPartnerResPartners().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testResPartnerToManySetOpCommercialPartnerResPartners(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c, d, e ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResPartner{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCommercialPartnerResPartners(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CommercialPartnerResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCommercialPartnerResPartners(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CommercialPartnerResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CommercialPartnerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CommercialPartnerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CommercialPartnerID) {
		t.Error("foreign key was wrong value", a.ID, d.CommercialPartnerID)
	}
	if !queries.Equal(a.ID, e.CommercialPartnerID) {
		t.Error("foreign key was wrong value", a.ID, e.CommercialPartnerID)
	}

	if b.R.CommercialPartner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CommercialPartner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CommercialPartner != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CommercialPartner != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CommercialPartnerResPartners[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CommercialPartnerResPartners[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testResPartnerToManyRemoveOpCommercialPartnerResPartners(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c, d, e ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResPartner{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCommercialPartnerResPartners(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CommercialPartnerResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCommercialPartnerResPartners(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CommercialPartnerResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CommercialPartnerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CommercialPartnerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CommercialPartner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CommercialPartner != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CommercialPartner != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CommercialPartner != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CommercialPartnerResPartners) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CommercialPartnerResPartners[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CommercialPartnerResPartners[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testResPartnerToManyAddOpParentResPartners(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c, d, e ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResPartner{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ResPartner{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentResPartners(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ParentID) {
			t.Error("foreign key was wrong value", a.ID, first.ParentID)
		}
		if !queries.Equal(a.ID, second.ParentID) {
			t.Error("foreign key was wrong value", a.ID, second.ParentID)
		}

		if first.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentResPartners[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentResPartners[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentResPartners().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testResPartnerToManySetOpParentResPartners(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c, d, e ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResPartner{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentResPartners(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentResPartners(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ParentID) {
		t.Error("foreign key was wrong value", a.ID, d.ParentID)
	}
	if !queries.Equal(a.ID, e.ParentID) {
		t.Error("foreign key was wrong value", a.ID, e.ParentID)
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentResPartners[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentResPartners[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testResPartnerToManyRemoveOpParentResPartners(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c, d, e ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ResPartner{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentResPartners(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentResPartners(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentResPartners().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentResPartners) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentResPartners[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentResPartners[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testResPartnerToOneResPartnerUsingCommercialPartner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ResPartner
	var foreign ResPartner

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CommercialPartnerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CommercialPartner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ResPartnerSlice{&local}
	if err = local.L.LoadCommercialPartner(ctx, tx, false, (*[]*ResPartner)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CommercialPartner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CommercialPartner = nil
	if err = local.L.LoadCommercialPartner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CommercialPartner == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testResPartnerToOneResPartnerUsingParent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ResPartner
	var foreign ResPartner

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, resPartnerDBTypes, false, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Parent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ResPartnerSlice{&local}
	if err = local.L.LoadParent(ctx, tx, false, (*[]*ResPartner)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testResPartnerToOneSetOpResPartnerUsingCommercialPartner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ResPartner{&b, &c} {
		err = a.SetCommercialPartner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CommercialPartner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CommercialPartnerResPartners[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CommercialPartnerID, x.ID) {
			t.Error("foreign key was wrong value", a.CommercialPartnerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CommercialPartnerID))
		reflect.Indirect(reflect.ValueOf(&a.CommercialPartnerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CommercialPartnerID, x.ID) {
			t.Error("foreign key was wrong value", a.CommercialPartnerID, x.ID)
		}
	}
}

func testResPartnerToOneRemoveOpResPartnerUsingCommercialPartner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCommercialPartner(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCommercialPartner(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CommercialPartner().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CommercialPartner != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CommercialPartnerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CommercialPartnerResPartners) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testResPartnerToOneSetOpResPartnerUsingParent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b, c ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ResPartner{&b, &c} {
		err = a.SetParent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentResPartners[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentID))
		reflect.Indirect(reflect.ValueOf(&a.ParentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentID, x.ID)
		}
	}
}

func testResPartnerToOneRemoveOpResPartnerUsingParent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ResPartner
	var b ResPartner

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, resPartnerDBTypes, false, strmangle.SetComplement(resPartnerPrimaryKeyColumns, resPartnerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParent(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParent(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Parent().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Parent != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentResPartners) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testResPartnersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testResPartnersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ResPartnerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testResPartnersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ResPartners().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	resPartnerDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `CompanyID`: `integer`, `CreateDate`: `timestamp without time zone`, `DisplayName`: `character varying`, `Date`: `date`, `Title`: `integer`, `ParentID`: `integer`, `Ref`: `character varying`, `Lang`: `character varying`, `TZ`: `character varying`, `UserID`: `integer`, `Vat`: `character varying`, `Website`: `character varying`, `Comment`: `text`, `CreditLimit`: `double precision`, `Active`: `boolean`, `Employee`: `boolean`, `Function`: `character varying`, `Type`: `character varying`, `Street`: `character varying`, `Street2`: `character varying`, `Zip`: `character varying`, `City`: `character varying`, `StateID`: `integer`, `CountryID`: `integer`, `PartnerLatitude`: `numeric`, `PartnerLongitude`: `numeric`, `Email`: `character varying`, `Phone`: `character varying`, `Mobile`: `character varying`, `IsCompany`: `boolean`, `IndustryID`: `integer`, `Color`: `integer`, `PartnerShare`: `boolean`, `CommercialPartnerID`: `integer`, `CommercialCompanyName`: `character varying`, `CompanyName`: `character varying`, `CreateUID`: `integer`, `WriteUID`: `integer`, `WriteDate`: `timestamp without time zone`, `DateLocalization`: `date`, `MessageMainAttachmentID`: `integer`, `EmailNormalized`: `character varying`, `MessageBounce`: `integer`, `ContactAddressComplete`: `character varying`, `SignupToken`: `character varying`, `SignupType`: `character varying`, `SignupExpiration`: `timestamp without time zone`, `PlanToChangeCar`: `boolean`, `PlanToChangeBike`: `boolean`, `TeamID`: `integer`, `PartnerGid`: `integer`, `AdditionalInfo`: `character varying`, `PhoneSanitized`: `character varying`, `DebitLimit`: `numeric`, `LastTimeEntriesChecked`: `timestamp without time zone`, `InvoiceWarn`: `character varying`, `InvoiceWarnMSG`: `text`, `SupplierRank`: `integer`, `CustomerRank`: `integer`, `PickingWarn`: `character varying`, `PickingWarnMSG`: `text`, `PurchaseWarn`: `character varying`, `PurchaseWarnMSG`: `text`, `SaleWarn`: `character varying`, `SaleWarnMSG`: `text`, `GUID`: `character varying`, `ZoneID`: `integer`, `ClusterID`: `integer`, `DistrictID`: `integer`, `MapWidgetField`: `character varying`, `LocationAssignedZoneFalse`: `boolean`, `OcnToken`: `character varying`, `OnlinePartnerInformation`: `character varying`}
	_                 = bytes.MinRead
)

func testResPartnersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(resPartnerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(resPartnerAllColumns) == len(resPartnerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testResPartnersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(resPartnerAllColumns) == len(resPartnerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ResPartner{}
	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, resPartnerDBTypes, true, resPartnerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(resPartnerAllColumns, resPartnerPrimaryKeyColumns) {
		fields = resPartnerAllColumns
	} else {
		fields = strmangle.SetComplement(
			resPartnerAllColumns,
			resPartnerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ResPartnerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testResPartnersUpsert(t *testing.T) {
	t.Parallel()

	if len(resPartnerAllColumns) == len(resPartnerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ResPartner{}
	if err = randomize.Struct(seed, &o, resPartnerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ResPartner: %s", err)
	}

	count, err := ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, resPartnerDBTypes, false, resPartnerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ResPartner struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ResPartner: %s", err)
	}

	count, err = ResPartners().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
