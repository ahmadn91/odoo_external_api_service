// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ResPartners", testResPartners)
}

func TestDelete(t *testing.T) {
	t.Run("ResPartners", testResPartnersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ResPartners", testResPartnersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ResPartners", testResPartnersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ResPartners", testResPartnersExists)
}

func TestFind(t *testing.T) {
	t.Run("ResPartners", testResPartnersFind)
}

func TestBind(t *testing.T) {
	t.Run("ResPartners", testResPartnersBind)
}

func TestOne(t *testing.T) {
	t.Run("ResPartners", testResPartnersOne)
}

func TestAll(t *testing.T) {
	t.Run("ResPartners", testResPartnersAll)
}

func TestCount(t *testing.T) {
	t.Run("ResPartners", testResPartnersCount)
}

func TestHooks(t *testing.T) {
	t.Run("ResPartners", testResPartnersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ResPartners", testResPartnersInsert)
	t.Run("ResPartners", testResPartnersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ResPartnerToResPartnerUsingCommercialPartner", testResPartnerToOneResPartnerUsingCommercialPartner)
	t.Run("ResPartnerToResPartnerUsingParent", testResPartnerToOneResPartnerUsingParent)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ResPartnerToCommercialPartnerResPartners", testResPartnerToManyCommercialPartnerResPartners)
	t.Run("ResPartnerToParentResPartners", testResPartnerToManyParentResPartners)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ResPartnerToResPartnerUsingCommercialPartnerResPartners", testResPartnerToOneSetOpResPartnerUsingCommercialPartner)
	t.Run("ResPartnerToResPartnerUsingParentResPartners", testResPartnerToOneSetOpResPartnerUsingParent)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ResPartnerToResPartnerUsingCommercialPartnerResPartners", testResPartnerToOneRemoveOpResPartnerUsingCommercialPartner)
	t.Run("ResPartnerToResPartnerUsingParentResPartners", testResPartnerToOneRemoveOpResPartnerUsingParent)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ResPartnerToCommercialPartnerResPartners", testResPartnerToManyAddOpCommercialPartnerResPartners)
	t.Run("ResPartnerToParentResPartners", testResPartnerToManyAddOpParentResPartners)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ResPartnerToCommercialPartnerResPartners", testResPartnerToManySetOpCommercialPartnerResPartners)
	t.Run("ResPartnerToParentResPartners", testResPartnerToManySetOpParentResPartners)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ResPartnerToCommercialPartnerResPartners", testResPartnerToManyRemoveOpCommercialPartnerResPartners)
	t.Run("ResPartnerToParentResPartners", testResPartnerToManyRemoveOpParentResPartners)
}

func TestReload(t *testing.T) {
	t.Run("ResPartners", testResPartnersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ResPartners", testResPartnersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ResPartners", testResPartnersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ResPartners", testResPartnersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ResPartners", testResPartnersSliceUpdateAll)
}
